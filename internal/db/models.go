// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type MerchantCategory string

const (
	MerchantCategorySmallRestaurant       MerchantCategory = "SmallRestaurant"
	MerchantCategoryMediumRestaurant      MerchantCategory = "MediumRestaurant"
	MerchantCategoryLargeRestaurant       MerchantCategory = "LargeRestaurant"
	MerchantCategoryMerchandiseRestaurant MerchantCategory = "MerchandiseRestaurant"
	MerchantCategoryBoothKiosk            MerchantCategory = "BoothKiosk"
	MerchantCategoryConvenienceStore      MerchantCategory = "ConvenienceStore"
)

func (e *MerchantCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MerchantCategory(s)
	case string:
		*e = MerchantCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for MerchantCategory: %T", src)
	}
	return nil
}

type NullMerchantCategory struct {
	MerchantCategory MerchantCategory
	Valid            bool // Valid is true if MerchantCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMerchantCategory) Scan(value interface{}) error {
	if value == nil {
		ns.MerchantCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MerchantCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMerchantCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MerchantCategory), nil
}

type ProductCategory string

const (
	ProductCategoryBeverage   ProductCategory = "Beverage"
	ProductCategoryFood       ProductCategory = "Food"
	ProductCategorySnack      ProductCategory = "Snack"
	ProductCategoryCondiments ProductCategory = "Condiments"
	ProductCategoryAdditions  ProductCategory = "Additions"
)

func (e *ProductCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductCategory(s)
	case string:
		*e = ProductCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductCategory: %T", src)
	}
	return nil
}

type NullProductCategory struct {
	ProductCategory ProductCategory
	Valid           bool // Valid is true if ProductCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductCategory) Scan(value interface{}) error {
	if value == nil {
		ns.ProductCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductCategory), nil
}

type UserRole string

const (
	UserRoleUser  UserRole = "user"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type CalculatedEstimate struct {
	ID                           pgtype.UUID
	UserID                       pgtype.UUID
	TotalPrice                   int32
	EstimatedDeliveryTimeMinutes int32
	EstimateData                 []byte
	CreatedAt                    pgtype.Timestamptz
}

type Image struct {
	ID        pgtype.UUID
	Filename  string
	Url       string
	SizeBytes int64
	CreatedAt pgtype.Timestamptz
}

type Merchant struct {
	ID               pgtype.UUID
	Name             string
	MerchantCategory MerchantCategory
	Location         interface{}
	CreatedAt        pgtype.Timestamptz
	ImageUrl         string
}

type MerchantItem struct {
	ID              pgtype.UUID
	MerchantID      pgtype.UUID
	Name            string
	ProductCategory ProductCategory
	Price           int32
	CreatedAt       pgtype.Timestamptz
	ImageUrl        string
}

type Order struct {
	ID                   pgtype.UUID
	UserID               pgtype.UUID
	CalculatedEstimateID pgtype.UUID
	CreatedAt            pgtype.Timestamptz
}

type User struct {
	ID       pgtype.UUID
	Username string
	Password string
	Email    string
	Role     UserRole
}
