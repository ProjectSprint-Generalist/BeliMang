// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  username, password, email, role
) VALUES (
  $1, $2, $3, $4
)
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
	Role     UserRole
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Role,
	)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, email, role FROM users where username = $1 AND role = $2
`

type GetUserByUsernameParams struct {
	Username string
	Role     UserRole
}

func (q *Queries) GetUserByUsername(ctx context.Context, arg GetUserByUsernameParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, arg.Username, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
	)
	return i, err
}
